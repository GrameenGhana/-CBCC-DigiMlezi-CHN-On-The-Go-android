<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 25.2.5">

    <issue
        id="ResourceType"
        severity="Fatal"
        message="Expected resource of type id"
        category="Correctness"
        priority="7"
        summary="Wrong Resource Type"
        explanation="Ensures that resource id&apos;s passed to APIs are of the right type; for example, calling `Resources.getColor(R.string.name)` is wrong."
        errorLine1="     responsesRG.setId(234523465);"
        errorLine2="                       ~~~~~~~~~">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/java/org/digitalcampus/oppia/widgets/quiz/MultiChoiceWidget.java"
            line="50"
            column="24"/>
    </issue>

    <issue
        id="ResourceType"
        severity="Fatal"
        message="Expected resource of type id"
        category="Correctness"
        priority="7"
        summary="Wrong Resource Type"
        explanation="Ensures that resource id&apos;s passed to APIs are of the right type; for example, calling `Resources.getColor(R.string.name)` is wrong."
        errorLine1="  RadioGroup responsesRG = (RadioGroup) view.findViewById(234523465);"
        errorLine2="                                                          ~~~~~~~~~">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/java/org/digitalcampus/oppia/widgets/quiz/MultiChoiceWidget.java"
            line="72"
            column="59"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="Avoid non-default constructors in fragments: use a default constructor plus `Fragment#setArguments(Bundle)` instead"
        category="Correctness"
        priority="6"
        summary="Fragment not instantiatable"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" public RoutineActivityDetails(ViewPager mViewPager) { "
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/java/org/cbccessence/cch/model/RoutineActivityDetails.java"
            line="41"
            column="9"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefServerDefault`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefServerDefault&quot;>http://188.166.30.140/cb/content/lc/&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="4"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefServerTimeoutConnectionDefault`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefServerTimeoutConnectionDefault&quot;>10000&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="5"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefServerTimeoutResponseDefault`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefServerTimeoutResponseDefault&quot;>20000&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="6"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_api_key`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;prefs_api_key&quot;>prefApiKey&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="8"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_background_data_connect`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;prefs_background_data_connect&quot;>prefBackgroundDataConnect&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="9"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_display_name`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;prefs_display_name&quot;>prefDisplayName&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="10"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_highlightCompleted`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;prefs_highlightCompleted&quot;>prefHighlightCompleted&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="11"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_language`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_language&quot;>prefLanguage&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="12"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_last_media_scan`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_last_media_scan&quot;>prefLastMediaScan&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_metadata`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_metadata&quot;>prefMetadata&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="14"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_schedule_reminders_no`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_schedule_reminders_no&quot;>prefNoScheduleReminders&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_schedule_reminders_show`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_schedule_reminders_show&quot;>prefShowScheduleReminders&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="16"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_section_numbers_show`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_section_numbers_show&quot;>prefShowSectionNumbers&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_server`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_server&quot;>prefServer&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_server_timeout_connection`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_server_timeout_connection&quot;>prefServerTimeoutConnection&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="19"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_server_timeout_response`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_server_timeout_response&quot;>prefServerTimeoutResponse&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_username`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_username&quot;>prefUsername&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="21"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_points`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_points&quot;>prefPoints&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_badges`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_badges&quot;>prefBadges&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefs_scoring_enabled`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefs_scoring_enabled&quot;>prefScoringEnabled&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`serverAddress`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;serverAddress&quot;>http://188.166.30.140/learning/&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="25"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`serverDefaultAddress`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1=" &lt;string name=&quot;serverDefaultAddress&quot;>http://188.166.30.140&lt;/string>"
        errorLine2="         ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/resources.xml"
            line="26"
            column="10"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`search_hint`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;search_hint&quot;>Search CCH&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="8"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`menu_search`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;menu_search&quot;>Search&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="9"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`name`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;name&quot;>Name&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="13"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`client_type`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;client_type&quot;>Client type&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="14"
            column="13"/>
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="405"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`age`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;age&quot;>Age&lt;/string>"
        errorLine2="            ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="15"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`gender`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;gender&quot;>Gender&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="16"
            column="13"/>
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="524"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`male`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;male&quot;>Male&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="17"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`female`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;female&quot;>Female&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="18"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`register_mm`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;register_mm&quot;>Register for DigiAfia&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="19"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`phone`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;phone&quot;>Phone Number&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="20"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`channel`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;channel&quot;>Channel&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="21"
            column="13"/>
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="418"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`voice`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;voice&quot;>Voice&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="22"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sms`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sms&quot;>Sms&lt;/string>"
        errorLine2="            ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="23"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`week`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;week&quot;>Start week&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="24"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`program`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;program&quot;>Program&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="25"
            column="13"/>
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="425"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pregnancy_content`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;pregnancy_content&quot;>Pregnancy Content&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="26"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`child_content`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;child_content&quot;>Child Content&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="27"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`start_week`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;start_week&quot;>Start week&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="28"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`longitude`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;longitude&quot;>Longitude&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="29"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`latitude`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;latitude&quot;>Latitude&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="30"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`menu_download_all`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;menu_download_all&quot;>Download All&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="32"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_baseline`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_baseline&quot;>Baseline&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="44"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`widget_quiz_feedback_response_title`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;widget_quiz_feedback_response_title&quot;>You answered: &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="68"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`widget_quiz_feedback_feedback_title`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;widget_quiz_feedback_feedback_title&quot;>Feedback: &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="69"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`prefShowSectionNumbers`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;prefShowSectionNumbers&quot;>Show section numbers&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="88"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`please_wait`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;please_wait&quot;>Please wait…&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="92"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`post_log_in`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;post_log_in&quot;>Logged in. Getting user info&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="118"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`no_access`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;no_access&quot;>You do not have access to this module.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="119"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`monthTitleFont`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;monthTitleFont&quot;>roboto_light&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="120"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dayOfWeekFont`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;dayOfWeekFont&quot;>roboto_regular&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="121"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`dayOfMonthFont`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;dayOfMonthFont&quot;>roboto_light&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="122"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`currentDayOfMonthFont`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;currentDayOfMonthFont&quot;>roboto_light&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="123"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`user_not_found`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;user_not_found&quot;>User not found. Please register.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="151"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_no_password`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_no_password&quot;>Please enter your password&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="158"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`error_no_username_or_password`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;error_no_username_or_password&quot;>Please enter username and password&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="159"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`home_tip_ofday`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;home_tip_ofday&quot;>Tips of the day&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="186"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`home_menu`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;home_menu&quot;>Menu&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="187"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_cchlogin`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_cchlogin&quot;>CCHLogin&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="188"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`hello_world`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;hello_world&quot;>Hello world!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="189"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_settings`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_settings&quot;>Settings&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="190"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`message1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;message1&quot;>Zinc Supplements &lt;b>(only for children aged 2 months – 5 years)&lt;/b> &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="191"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`login`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;login&quot;>Login&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="192"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`username`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;username&quot;>Username&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="194"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`password`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;password&quot;>Password&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="195"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`validation_number`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;validation_number&quot;>Please enter a number&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="197"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`validation_startDate`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;validation_startDate&quot;>Please enter a start date&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="198"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`validation_endDate`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;validation_endDate&quot;>Please enter an end date&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="199"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_home`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_home&quot;>Home&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="203"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`action_logout`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;action_logout&quot;>Logout&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="204"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sans_serif`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sans_serif&quot;>sans-serif-light&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="214"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sw_prefs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sw_prefs&quot;>sw_prefs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="215"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`sw_reset`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;sw_reset&quot;>SW_reset&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="216"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`Select`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;Select&quot;>Select&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="230"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`TargetTypes`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;TargetTypes&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="231"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`Justification`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;Justification&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="237"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`UpdateFrequencies`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;UpdateFrequencies&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="248"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`Monitoring`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;Monitoring&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="256"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`EventNames`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;EventNames&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="266"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`Locations`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;Locations&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="289"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`ReminderFrequency`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;ReminderFrequency&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="356"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageIndicatorsName`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageIndicatorsName&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="365"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageIndicatorsDetailFamilyPlanning`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageIndicatorsDetailFamilyPlanning&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="371"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageIndicatorsDetailAgeGroups`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageIndicatorsDetailAgeGroups&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="376"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageIndicatorsSchoolHealth`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageIndicatorsSchoolHealth&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="382"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationTypes`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationTypes&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="391"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`loc`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;loc&quot;>"
        errorLine2="                  ~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="413"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationTypeBCG`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationTypeBCG&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="436"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationPenta`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationPenta&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="439"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationOPV`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationOPV&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="445"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationROTA`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationROTA&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="452"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationPCV`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationPCV&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="457"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationMeaslesRubella`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationMeaslesRubella&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="468"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationVitaminA`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationVitaminA&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="473"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationTT`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationTT&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="479"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`CoverageImmunizationYellowFever`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;CoverageImmunizationYellowFever&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="487"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`Trimester`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;Trimester&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="491"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`weeks`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;weeks&quot;>"
        errorLine2="                  ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="497"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`Districts`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;Districts&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="508"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`Intervals`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;Intervals&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="516"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`marital_status`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;marital_status&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="528"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`education`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;education&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="534"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`occupation`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;occupation&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="539"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`pregnancy_status`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string-array name=&quot;pregnancy_status&quot;>"
        errorLine2="                  ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="546"
            column="19"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`daily`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;daily&quot;>Daily&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="551"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`weekly`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;weekly&quot;>Weekly&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="552"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`monthly`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;monthly&quot;>Monthly&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="553"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`quarterly`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;quarterly&quot;>Quarterly&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="554"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`mid_year`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;mid_year&quot;>Mid-year&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="555"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`annually`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;annually&quot;>Annually&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="556"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_difficulty_breathing_cyanosis`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_difficulty_breathing_cyanosis&quot;>Difficulty Breathing or Cyanosis&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="557"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_put_client_on_left_leg_above_chest`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_put_client_on_left_leg_above_chest&quot;>Put client on her left side with her legs high above the chest&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="558"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_cover_mother_with_warmth`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_cover_mother_with_warmth&quot;>Cover the mother for warmth&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="559"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_recotd_clinicals_in_red_book`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_recotd_clinicals_in_red_book&quot;>Record clinical information in client’s maternal health or “Red” book. If possible, also fill out referral form&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="560"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_accompany_with_relative`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_accompany_with_relative&quot;>Accompany client, and have a family member accompany client to the health facility&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="561"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_followup_after_discharge`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_followup_after_discharge&quot;>Follow up with client after discharge from health center or hospital&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="562"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_refer_to_hospital_immediately`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_refer_to_hospital_immediately&quot;>Refer mother and baby to a health center or hospital IMMEDIATELY&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="563"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_arrange_for_transport`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_arrange_for_transport&quot;>Call provider and arrange transport&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="564"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_take_action_continue`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_take_action_continue&quot;>Take Action: Continue&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="565"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_organise_blood_donor`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_organise_blood_donor&quot;>Organise Blood Donor&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="566"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_client_lying_postion`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_client_lying_postion&quot;>&quot;Place client in a lying-down position  &quot;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="567"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_no_viginal_exam`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_no_viginal_exam&quot;>DO NOT perform vaginal exam&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="568"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_2_tablet_para`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_2_tablet_para&quot;>Give 2 tablets of paracetamol for pain&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="569"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_encourage_fluid_intake`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_encourage_fluid_intake&quot;>Encourage fluid intake&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="570"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_take_action`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_take_action&quot;>Take Action &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="571"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_assess_mother_danger_signs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_assess_mother_danger_signs&quot;>Assess if mother has of the following danger signs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="572"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_persistent_vomiting`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_persistent_vomiting&quot;>Persistent vomiting&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="573"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_convulstion`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_convulstion&quot;>Convulsions&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="574"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_altered_consciousness`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_altered_consciousness&quot;>Altered consciousness&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="575"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dark_cola_like_urine`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dark_cola_like_urine&quot;>Dark, coca-cola coloured urine&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="576"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_persistent_temp_37c`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_persistent_temp_37c&quot;>Persistent temperature = 39C&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="577"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_prostration`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_prostration&quot;>Prostration&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="578"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_jaundice`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_jaundice&quot;>Jaundice&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="579"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_severe_pallor`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_severe_pallor&quot;>Severe pallor&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="580"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_shock`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_shock&quot;>Shock&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="581"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_cold_moist_skin`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_cold_moist_skin&quot;>Cold moist skin&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="582"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_weak_or_fast_pulse`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_weak_or_fast_pulse&quot;>Weak or fast pulse: >110/min&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="583"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_bp_check`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_bp_check&quot;>Check BP: is  it systolic BP &amp;lt;90 mmHg&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="584"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_bleeding`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_bleeding&quot;>Bleeding&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="585"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_check_mothers_temperature_gt_38`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_check_mothers_temperature_gt_38&quot;>Check Temperature.  Does the mother have a fever > 38C? &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="586"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_ask`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_ask&quot;>ASK&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="587"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_how_long_with_fever`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_how_long_with_fever&quot;>tHow long have you had a fever?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="588"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_if_more_than7day_fever_every_day`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_if_more_than7day_fever_every_day&quot;>If more than 7 days, have you had a fever every day?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="589"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`next`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;next&quot;>Next&lt;/string>"
        errorLine2="            ~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="590"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_perform_malaria_test`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_perform_malaria_test&quot;>Perform Malaria Test, if Possible&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="591"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_result_malaria_test`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_result_malaria_test&quot;>What is the result of the malaria test?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="592"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_positive_malaria_test`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_positive_malaria_test&quot;>Positive malaria test (RDT)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="593"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_postive`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_postive&quot;>Positive&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="594"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_negative`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_negative&quot;>Negative&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="595"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fluid_intake`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fluid_intake&quot;>Encourage Fluid Intake&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="596"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_un_complicated_malaria`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_un_complicated_malaria&quot;>Uncomplicated Malaria&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="597"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fever_history_present`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fever_history_present&quot;>Fever or history of fever present within the last 2-3 days&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="598"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_chill`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_chill&quot;>Chills&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="599"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_rigor`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_rigor&quot;>Rigor (shivering)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="600"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_headache`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_headache&quot;>Headache&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="601"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_body_joint_pains`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_body_joint_pains&quot;>Body and joint pain&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="602"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_nausea_with_out_vomiting`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_nausea_with_out_vomiting&quot;>Nausea with or without vomiting&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="603"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_loss_appetite`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_loss_appetite&quot;>Loss of appetite&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="604"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_sweating`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_sweating&quot;>Sweating&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="605"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_bitterness_in_month`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_bitterness_in_month&quot;>Bitterness in the mouth&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="606"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_schedule_pnc_refer`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_schedule_pnc_refer&quot;>If client is due for a scheduled PNC visit, refer her to see a midwife&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="607"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_not_due_pnc`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_not_due_pnc&quot;>If client is not due for a scheduled visit, and does not have with any danger signs provide anti-malarial treatment:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="608"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_treate_client_with_artesunate`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="               &lt;string name=&quot;str_treate_client_with_artesunate&quot;>"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="609"
            column="24"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_1000mg_para`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_1000mg_para&quot;>1000 mg Paracetamol may be given every 4&amp;#8211;6 hr until fever returns to normal &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="611"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_councsel_mother_on_following`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_councsel_mother_on_following&quot;>Counsel mother on the following&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="612"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_sleep_innet`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_sleep_innet&quot;>To sleep under an insecticide treated net every night with her baby&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="613"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_importance_ontime_dosage`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_importance_ontime_dosage&quot;>Importance of taking malaria drugs and what the dosage of drugs and when to take them &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="614"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_eat_food_vitc_folic`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_eat_food_vitc_folic&quot;>To eat foods rich in iron and folic acid + vitamin C&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="615"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_schedule_pnc_visit`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_schedule_pnc_visit&quot;>To go for scheduled PNC visits &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="616"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_followup_every24h_if_no_hospital`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_followup_every24h_if_no_hospital&quot;>Follow-up with client within 24 hours; if she is not improving refer client to the health center or hospital&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="617"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_mother_malaria_negative`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_mother_malaria_negative&quot;>Mother Malaria Negative&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="618"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_mother_sleep_net_wth_baby`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_mother_sleep_net_wth_baby&quot;>Counsel mother to sleep under an insecticide treated net every night with her baby&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="619"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_test_anaemia`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_test_anaemia&quot;>Test  Anaemia&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="620"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_feeling_tired`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_feeling_tired&quot;>Do you get easily tired?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="621"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_check_look`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_check_look&quot;>Check and Look&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="622"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`checki_hemoglobin_possibility`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;checki_hemoglobin_possibility&quot;>Check client’s Hemoglobin, if possible&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="623"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_check_client_hemoglobin_possible`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_check_client_hemoglobin_possible&quot;>Check client’s Hemoglobin, if possible&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="624"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_look_conjunctiva_nail_tongue`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_look_conjunctiva_nail_tongue&quot;>Look at conjunctiva, nail bed, tongue, palmar&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="625"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_assess_client_pallor`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_assess_client_pallor&quot;>Assess if the client has pallor&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="626"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_hb_gt7`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_hb_gt7&quot;>Hb &amp;lt; 7 g/dL&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="627"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_mother_has_aneamia`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_mother_has_aneamia&quot;> Does the mother have anaemia?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="628"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_client_have_any_symptoms`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_client_have_any_symptoms&quot;>Does the client have any of the following symptoms?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="629"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_severe_anaemia`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_severe_anaemia&quot;>Severe anaemia&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="630"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_anaemia_moderate`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_anaemia_moderate&quot;>Moderate Anaemia&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="631"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_anaemia_no`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_anaemia_no&quot;>No Anaemia&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="632"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pallor`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pallor&quot;>Pallor&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="633"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_hb_lt_7_possible_to_measure`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_hb_lt_7_possible_to_measure&quot;>Hb &amp;lt;7 g/dL, if possible to measure&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="634"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_hb_7_11_possible`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_hb_7_11_possible&quot;>Hb 7-11 g/dL, if possible to measure&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="635"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_possible_client_iron_folate_supplements`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_possible_client_iron_folate_supplements&quot;>If possible, give client iron and folate supplements:  1 iron tablet to be taken twice daily + 1 folic acid tablet to be taken once daily&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="636"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_client_eat_food_iron_folate`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_client_eat_food_iron_folate&quot;>&quot;Counsel client to eat foods rich in iron and folate + vitamin C &quot;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="637"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_record_care_red_book`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_record_care_red_book&quot;>Record care given in client’s maternal health or “Red” book.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="638"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_follow_client_2weeks_hb`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_follow_client_2weeks_hb&quot;>Follow up with client in 2 weeks, and refer her to the nearest health facility to check Hb&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="639"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_if_mother_gave_birth_8hr`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_if_mother_gave_birth_8hr&quot;>If mother has given birth in the last 8 hours, check uterus&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="640"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_access_mother_breast_problem`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_access_mother_breast_problem&quot;>Otherwise, assess if mother has any breast problems&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="641"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_encounterd_client_given_birth_last_2weeks`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_encounterd_client_given_birth_last_2weeks&quot;>Are you encountering a client who has given birth in her home or community in the last 2 weeks&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="642"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_ask_how_u_feel`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_ask_how_u_feel&quot;>How are you feeling&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="643"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_how_ur_breast_feels`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_how_ur_breast_feels&quot;>How do you breasts feel?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="644"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_examine_breast`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_examine_breast&quot;>Examine breasts&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="645"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_check_temperature`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_check_temperature&quot;>Check temperature&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="646"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_observe_a_feed`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_observe_a_feed&quot;>Observe a feed.  Check for positioning and attachment&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="647"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breast_problems`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breast_problems&quot;>Breast Problems&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="648"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_does_mother_have_symptoms`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_does_mother_have_symptoms&quot;>Does mother have any of the following symptoms?&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="649"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_mastitis`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_mastitis&quot;>Mastitis&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="650"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breast_engorgement`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breast_engorgement&quot;>Breast engorgement&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="651"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_cracked_sore_nipples`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_cracked_sore_nipples&quot;>Cracked/sore nipples&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="652"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_no_breast_problem`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_no_breast_problem&quot;>No breast problems&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="653"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breast_is_painful_swollen_red`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breast_is_painful_swollen_red&quot;>Part of the breast is painful, swollen and red&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="654"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tempetatur_gt_38`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tempetatur_gt_38&quot;>Temperature > 38C&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="655"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_feel_generally_ill`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_feel_generally_ill&quot;>Feels generally ill&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="656"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_refer_client_to_center_hospital_treatement`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_refer_client_to_center_hospital_treatement&quot;>Refer client to a health center or hospital for treatment&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="657"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_both_breast_swollen_shiny`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_both_breast_swollen_shiny&quot;>Both breasts swollen and shiny&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="658"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tempetature_lt_38c`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tempetature_lt_38c&quot;>Temperature &amp;lt; 38C&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="659"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_councel_mother_on_breast_engorgement`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_councel_mother_on_breast_engorgement&quot;>Counsel mother on what to do for breast engorgement&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="660"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_mother_good_breastfeeding_practices`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_mother_good_breastfeeding_practices&quot;>Counsel mother on good breastfeeding practices&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="661"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_follow_up_if_improvement_midwife_health_centre`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_follow_up_if_improvement_midwife_health_centre&quot;>Follow up with client in a few days to see if there is improvement.  If not, refer mother to see a midwife at the health center&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="662"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_mother_cracked_nipples`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_mother_cracked_nipples&quot;>Counsel mother on how to manage cracked nipples&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="663"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_check_if_mother_received_vitamin_a`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_check_if_mother_received_vitamin_a&quot;>Check if mother has received Vitamin A.  If not and Vitamin A is available, provide one dose to the mother and record care given in maternal health or “Red” book.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="664"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_nutrition_rest_personal_env_hygiene`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_nutrition_rest_personal_env_hygiene&quot;>Nutrition, rest, personal/environmental hygiene&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="665"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_mother_baby_sleep_itn_every_night`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_mother_baby_sleep_itn_every_night&quot;>For mother and baby to sleep under ITN every night&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="666"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_family_planning_sti_prevention_breastfeeding`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_family_planning_sti_prevention_breastfeeding&quot;>Family planning, STI prevention, exclusive breastfeeding, recognizing danger signs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="667"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_birth_prepare_comple_readiness`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_birth_prepare_comple_readiness&quot;>Birth preparedness &amp;amp; complication readiness&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="669"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_help_client_compli_ready_plan`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_help_client_compli_ready_plan&quot;>Help client on complication readiness plan, specifically on:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="670"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_plan_transport_for_family`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_plan_transport_for_family&quot;>Plan for transport, which family member(s) will accompany mother &amp;amp; baby and where to go if complications occurs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="671"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_register_for_nhis`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_register_for_nhis&quot;>Register mother &amp;amp; baby for health insurance or renew your NHIS. Save money for care and transport&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="672"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_go_health_facility_as_danger_signs_occurs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_go_health_facility_as_danger_signs_occurs&quot;>Go to the health facility as soon as danger signs occur&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="673"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_client`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_client&quot;>Counsel Client&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="674"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_importance_of_drugs_that_health_workers_give`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_importance_of_drugs_that_health_workers_give&quot;>The importance of drugs that health workers give to pregnant women, why they are given, and how they should be taken&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="675"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_avoid_abuse_drug_herbs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_avoid_abuse_drug_herbs&quot;>To avoid abuse/misuse of drugs and herbs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="676"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_avoid_alcohol_during_pregnancy`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_avoid_alcohol_during_pregnancy&quot;>To avoid consuming alcohol during pregnancy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="677"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_harmful_consequence_of_smoking`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_harmful_consequence_of_smoking&quot;>Harmful consequences of smoking&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="678"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_harmful_consequence_skin_bleaching`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_harmful_consequence_skin_bleaching&quot;>Harmful consequences of skin bleaching&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="679"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_care_new_born`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_care_new_born&quot;>Care of the newborn&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="680"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_need_ear_piercing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_need_ear_piercing&quot;>Need for ear piercing and circumcision&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="681"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_sickle_cell_screening`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_sickle_cell_screening&quot;>Sickle cell disease screening&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="682"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_importance_cord_care`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_importance_cord_care&quot;>Importance of good cord care&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="683"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_pregnant_woman_after_baby_born`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_pregnant_woman_after_baby_born&quot;>Counsel pregnant woman how to give home care after baby is born, which include&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="684"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breast_feed_frequently_10_24hr`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breast_feed_frequently_10_24hr&quot;>Breastfeeding frequently day and night: at least 10 times in 24 hours; or as often as and for as long as baby wants&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="685"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_good_hygience_hand_washing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_good_hygience_hand_washing&quot;>Good hygiene and hand washing&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="686"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_need_rest_drink_plenty_fluid`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_need_rest_drink_plenty_fluid&quot;>Need for rest, drinking plenty of fluids and eating more&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="687"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_importance_sleep_itn_every_night`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_importance_sleep_itn_every_night&quot;>Importance of sleeping under an ITN every night with her baby&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="688"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_iron_folic_acid_suppliment`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_iron_folic_acid_suppliment&quot;>Take iron and folic acid supplements for 6 weeks after giving birth&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="689"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_keep_babdy_warm`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_keep_babdy_warm&quot;>How to keep the baby warm, and what good sleeping positions are&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="690"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breastfeed_breast_care`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breastfeed_breast_care&quot;>How to breastfeed &amp;amp; breast care&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="691"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_need_to_know_breast_feeding`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_need_to_know_breast_feeding&quot;>What clients need to know about breastfeeding:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="692"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breast_milk_provides_all_food_baby_6_months`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breast_milk_provides_all_food_baby_6_months&quot;>Breast milk provides all the food and water a baby needs for the first 6 months of life&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="693"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_important_feed_baby_yellowish_milk`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_important_feed_baby_yellowish_milk&quot;>Important to feed baby the first yellowish milk known as colostrum&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="694"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_importance_exclusive_breast_feeding`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_importance_exclusive_breast_feeding&quot;>Exclusive breastfeeding means giving only breast milk, and nothing else (no other milks, foods or liquids, not even sips of water), except for medicines prescribed by a doctor or nurse.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="695"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_baby_should_put_breast_1st`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_baby_should_put_breast_1st&quot;>Baby should be put to the breast within the 1st hour of birth&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="696"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_good_attachment_baby_suckles_well`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_good_attachment_baby_suckles_well&quot;>Good attachment helps to ensure that baby suckles well&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="697"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_attach_help_mother_supply_good_breast_milk`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_attach_help_mother_supply_good_breast_milk&quot;>Good attachment helps mother to produce a good supply of breast milk&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="698"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_good_attachments_help_prevent_sore_cracked_nipples`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_good_attachments_help_prevent_sore_cracked_nipples&quot;>Good attachment helps prevent sore and cracked nipples&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="699"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_make_sure_baby_attached_well`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_make_sure_baby_attached_well&quot;>To make sure baby is attached well&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="700"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_touch_babys_lip_to_nipple`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_touch_babys_lip_to_nipple&quot;>Touch baby’s lips to nipple&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="701"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_wait_till_baby_month_opens`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_wait_till_baby_month_opens&quot;>Wait until baby’s mouth open wide&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="702"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_quickly_bring_breast_below`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_quickly_bring_breast_below&quot;>Quickly bring breast from below, aiming nipple up towards the roof of the baby’s mouth&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="703"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_baby_should_now_take_big_mouthful_breast_milk`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_baby_should_now_take_big_mouthful_breast_milk&quot;>Baby should now take a big mouthful of breast milk&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="704"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_baby_month_wide_open`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_baby_month_wide_open&quot;>Baby’s mouth is wide open&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="705"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_mother_can_see_more_darker_skin`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_mother_can_see_more_darker_skin&quot;>Mother can see more of the darker skin (areola) above the baby’s mouth than below&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="706"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_babys_lower_lip_turned_outward`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_babys_lower_lip_turned_outward&quot;>Baby’s lower lop is turned outwards&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="707"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_baby_chin_touch_breast`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_baby_chin_touch_breast&quot;>Baby’s chin is touching breast&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="708"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_how_often_client_breastfeed`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_how_often_client_breastfeed&quot;>How often should a client breastfeed:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="709"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_client_how_to_prevent_breastfeeding_prob`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_client_how_to_prevent_breastfeeding_prob&quot;>Counsel client on how to prevent common breastfeeding problems:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="710"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breastfeed_on_demand_8_12_times`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breastfeed_on_demand_8_12_times&quot;>Breastfeed baby on demand, both day and night, at least 8 – 12 times each day&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="711"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_frequent_feeding_will_help`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_frequent_feeding_will_help&quot;>Frequent feeding will help your body to produce breast milk&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="712"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_continue_feed_until_baby_finishes_thebreast`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_continue_feed_until_baby_finishes_thebreast&quot;>Continue to feed until baby finishes the breast and comes off on his or her own. Offer the other breast and let baby decide if he or she wants more or not&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="713"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_will_know_if_baby_taking_enough`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_will_know_if_baby_taking_enough&quot;>You will know if baby is taking enough breast milk if he or she passes light-coloured urine at least 6 times a day and is gaining weight&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="714"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_position_attach_baby_correctly_bf_shdnt_hurt`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_position_attach_baby_correctly_bf_shdnt_hurt&quot;>Position and attach baby correctly on the breast.  Breastfeeding should not hurt&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="715"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_if_nipple_crumps`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_if_nipple_crumps&quot;>If you develop cracked nipples, put some breast milk on them.  Do not use any types of creams or ointments except when prescribed by a health care provider&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="716"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_frequently_feed_to_prevent_swollen_breast`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_frequently_feed_to_prevent_swollen_breast&quot;>Feed frequently to prevent breasts from becoming swollen&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="717"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_baby_misses_a_feed`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_baby_misses_a_feed&quot;>If baby misses a feed you should express some milk to breast soft&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="718"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_keep_breast_milk_cool_place_not_more_than_6_8`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_keep_breast_milk_cool_place_not_more_than_6_8&quot;>Keep expressed breast milk in a cool place, but not longer than 6-8 hours&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="719"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_contact_health_provider_if_breast_painful_hot`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_contact_health_provider_if_breast_painful_hot&quot;>If one or both breasts become painful or hot to the touch, you should contact a health care provider&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="720"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_no_mixed_feeding`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_no_mixed_feeding&quot;>Mixed feeding (combining breast milk with anything else) is not healthy for the baby before 6 months of age.  Mixed feeding reduces the amount of milk that you can produce and also can make the baby sick&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="721"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_problem_with_breastfeeding_discuss_with_trained_counselor`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_problem_with_breastfeeding_discuss_with_trained_counselor&quot;>If you has any trouble practicing exclusive breastfeeding, discuss with a trained counselor&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="722"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_things_to_remember`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_things_to_remember&quot;>Things to remember&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="723"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exclusive_breastfeeding_during_1sr_6_mnths`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exclusive_breastfeeding_during_1sr_6_mnths&quot;>Exclusive breastfeeding during the first 6 months protects you from getting pregnant as long as periods have not returned. Consult family planning counsellor as soon as possible after giving birth&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="724"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_when_baby_6month_continue`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_when_baby_6month_continue&quot;>When baby is 6 months old continue breastfeeding and begin giving other foods&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="725"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_watch_sgins_diarrhoea_fever_etc`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_watch_sgins_diarrhoea_fever_etc&quot;>Watch for signs of diarrhoea, fever, difficulty breathing, or refusal to feed because these need prompt attention&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="726"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_if_mother_hiv_infected_from_nipple_cracked`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_if_mother_hiv_infected_from_nipple_cracked&quot;>If mother is HIV-infected, she should not feed her baby from a nipple that is cracked or bleeding. Instead, she should feed from the other breast and express and discard milk from the breasted that is affected&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="727"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_reinfection_practice_safe_price`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_reinfection_practice_safe_price&quot;>Getting infected or re-infected with HIV while breastfeeding increases the risk of mother to child transmission.  Important to practice safe sex by using condoms consistently and correctly&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="728"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_protect_mother_baby_from_hiv`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_protect_mother_baby_from_hiv&quot;>To protect the baby, the mother must know her HIV status&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="729"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_infant_immunisation_schedule`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_infant_immunisation_schedule&quot;>Infant Immunisation Schedule&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="730"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_vaginal_bleeding`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_vaginal_bleeding&quot;>Vaginal bleeding (heavy or sudden release)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="731"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pain_calf_without_swell`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pain_calf_without_swell&quot;>Pain in calf with or without swelling&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="732"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_severe_headache_blurr_vision`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_severe_headache_blurr_vision&quot;>Severe headache and/or blurred vision&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="733"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fever`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fever&quot;>Fever&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="734"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pale_tongue_eyes`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pale_tongue_eyes&quot;>Pale tongue &amp;amp; eyes&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="735"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_severe_adbominal_pain`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_severe_adbominal_pain&quot;>Severe abdominal pain&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="736"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_danger_signs_mother`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_danger_signs_mother&quot;>Danger Signs in the Mother&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="737"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breathing_difficulty`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breathing_difficulty&quot;>Breathing difficulty&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="738"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_convulsion_loss_consciousness`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_convulsion_loss_consciousness&quot;>Convulsions/loss of consciousness&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="739"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_foul_smelling_discharge_vagina`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_foul_smelling_discharge_vagina&quot;>Foul smelling discharge of vagina&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="740"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_diarrhoea`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_diarrhoea&quot;>Diarrhoea&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="741"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_small_baby`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_small_baby&quot;>Small baby&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="742"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_poor_no_sucking`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_poor_no_sucking&quot;>Poor or no suckling&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="743"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_baby_feels_hot_cold`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_baby_feels_hot_cold&quot;>Baby feels too hot or cold&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="744"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_convulsion_fits`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_convulsion_fits&quot;>Convulsions or fits (abnormal movement of any part of the body)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="745"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_jaundice_yellow_eyes_skins`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_jaundice_yellow_eyes_skins&quot;>Jaundice (yellow eyes, skin, palms &amp;amp; soles)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="746"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_sleep_too_much_hard_wake_up`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_sleep_too_much_hard_wake_up&quot;>Sleeps too much or hard to wake&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="747"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_difficulty_breathing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_difficulty_breathing&quot;>Difficulty breathing&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="748"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_red_cord_draining_pus`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_red_cord_draining_pus&quot;>Cord is red or draining pus&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="749"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_skin_sores_pus_from_eyes`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_skin_sores_pus_from_eyes&quot;>Skin sores and pus from eyes&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="750"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_other_newborn_danger_signs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_other_newborn_danger_signs&quot;>Other newborn danger signs include:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="751"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_cynaosis_blueness_colour`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_cynaosis_blueness_colour&quot;>Cyanosis/blueness/colour not pink&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="752"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_swollen_limbs_skull`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_swollen_limbs_skull&quot;>Swollen joints or limbs or skull&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="753"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_crying_weakly_inconsolably`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_crying_weakly_inconsolably&quot;>Crying weakly or inconsolably&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="754"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_postpartum_family_planning`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_postpartum_family_planning&quot;>Postpartum Family Planning&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="755"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_mother_benefit_postpartum`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_mother_benefit_postpartum&quot;>Counsel mother on benefits of postpartum family planning, and importance of birth spacing before having other children&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="756"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_health_timing_spacing_pregnancy`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_health_timing_spacing_pregnancy&quot;>Healthy timing and spacing of pregnancy means waiting at least 2-3 years before becoming pregnant women&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="757"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_spacing_childreb_allows`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_spacing_childreb_allows&quot;>Spacing your children allows:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="758"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_more_time_breastfeed_care_each_other`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_more_time_breastfeed_care_each_other&quot;>More time to breastfeed and care for each child&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="759"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_more_time_recovery_btn_pregnancy`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_more_time_recovery_btn_pregnancy&quot;>More time for your body to recover between pregnancies&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="760"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_more_money_bcos_u_have_fewer_chdn`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_more_money_bcos_u_have_fewer_chdn&quot;>More money because you have fewer children, and thus fewer expenses for school fees, clothing, food, etc.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="761"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_feeding_ur_baby_1st_6momths`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_feeding_ur_baby_1st_6momths&quot;>Feeding your baby only breast milk for the first 6 months helps to space births in a way that is healthy for both you and your baby&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="762"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pnc_visits`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pnc_visits&quot;>PNC Visits&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="763"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_return_first_follow_up`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_return_first_follow_up&quot;>Return for first follow-up in:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="764"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pnc_visit_1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pnc_visit_1&quot;>PNC visit 1 &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="765"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pnc_visit_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pnc_visit_2&quot;>PNC visit 2&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="766"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pnc_visit_3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pnc_visit_3&quot;>PNC visit 3 &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="767"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_within_48_hr_delivery`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_within_48_hr_delivery&quot;>Within 48 hours of delivery&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="768"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_6_7_days_after_delivery`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_6_7_days_after_delivery&quot;>6-7 days after delivery&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="769"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_6_weeks_after_delivery`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_6_weeks_after_delivery&quot;>6 weeks after delivery&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="770"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_advise_mother_when_return_health_facility_immediately`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_advise_mother_when_return_health_facility_immediately&quot;>Advise Mother When to Return to the Health Facility IMMEDIATELY&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="771"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_breastfeeding_poorly`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_breastfeeding_poorly&quot;>Breastfeeding poorly&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="772"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_reduced_activity`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_reduced_activity&quot;>Reduced activity&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="773"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_becomes_sicker`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_becomes_sicker&quot;>Becomes sicker&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="774"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_develops_fever`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_develops_fever&quot;>Develops a fever&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="775"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_feels_usually_cold`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_feels_usually_cold&quot;>Feels usually cold&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="776"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fast_breathing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fast_breathing&quot;>Fast breathing&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="777"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_palms_soles_appear_yelllow`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_palms_soles_appear_yelllow&quot;>Palms &amp;amp; soles appear yellow&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="778"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_when_speaking_to_client_keep_in_mind`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_when_speaking_to_client_keep_in_mind&quot;>When speaking to client, keep in mind:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="779"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_courtesy_and_kind`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_courtesy_and_kind&quot;>Courteous and kind: treat her and (her family member) with respect and sympathy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="780"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_listern_ask_client`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_listern_ask_client&quot;>Listen and ask: ask client first what she knows about pregnancy and childbirth, before telling them what she should do.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="781"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_health_education_shd_individualised`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_health_education_shd_individualised&quot;>Health education should be individualised: provide the client appropriate counseling specific to her gestational age and specific problems identified&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="782"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_answer_question_ask_client`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_answer_question_ask_client&quot;>Answer questions: ask clients if they have any questions or concerns&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="783"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_hiv_care`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_hiv_care&quot;>HIV Care&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="784"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_importance_hiv_status`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_importance_hiv_status&quot;>Importance of knowing your HIV status&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="785"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_hiv_status_take_test`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_hiv_status_take_test&quot;>To know your HIV status, you must take a test&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="786"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_hiv_if_positive_counsel_provider`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_hiv_if_positive_counsel_provider&quot;>If you are HIV-infected, your health care provider will counsel you on your care and treatment, and on how best to feed your baby&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="787"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_hiv_infected_need_xtra_energy`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_hiv_infected_need_xtra_energy&quot;>If you are HIV-infected, you need extra food to give you extra energy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="788"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_protect_urself_baby_4m_hiv`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_protect_urself_baby_4m_hiv&quot;>Protect yourself and your baby form HIV and other sexually transmitted infections during pregnancy and while you are breastfeeding by practicing safe sex&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="789"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_condom_planning_counselor`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_condom_planning_counselor&quot;>Use condoms consistently and correctly.  Consult a family planning counselor&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="790"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_educate_malaria_prevention`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_educate_malaria_prevention&quot;>Educate on malaria prevention&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="791"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_educate_client_keep_environment_clean`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_educate_client_keep_environment_clean&quot;>Educate client to keep her environment clean&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="792"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_educate_client_on_sleeping`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_educate_client_on_sleeping&quot;>Educate client on the importance of sleeping under an insecticide treated net every night&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="793"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_purpose_iptp_pregnancy`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_purpose_iptp_pregnancy&quot;>Explain purpose of Intermittent Preventive Treatment (IPTp) during pregnancy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="794"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_prompt_treatement`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_prompt_treatement&quot;>Counsel client to seek prompt treatment when they have a fever with or without any of the above symptoms&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="795"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_nutrition_counseling`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_nutrition_counseling&quot;>Nutrition counseling&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="796"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_eat_3_meals_1_snack`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_eat_3_meals_1_snack&quot;>Eat 3 meals each day + 1 extra small meal or “snack” (food taken in between main meals).&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="797"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_drink_6_8_glasses_per_day`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_drink_6_8_glasses_per_day&quot;>Drink 6-8 glasses of liquids a day.  Avoid taking tea or coffee with meals and limit the amount of coffee you drink during pregnancy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="798"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_eat_food_rich_calcium_iron_folate_vitamin_c`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_eat_food_rich_calcium_iron_folate_vitamin_c&quot;>Counsel client to eat foods rich in calcium, iron, folate and vitamin C:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="799"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_meat_other_meat_parts`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_meat_other_meat_parts&quot;>Meat (especially liver, kidney, and other organ meats)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="800"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pens_peas_lentils`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pens_peas_lentils&quot;>Beans, peas, lentils&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="801"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dark_green_leafy_vegatables`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dark_green_leafy_vegatables&quot;>Dark green leafy vegetables&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="802"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_eggs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_eggs&quot;>Eggs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="803"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fish`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fish&quot;>Fish&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="804"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fruis_oranges_pineapples`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fruis_oranges_pineapples&quot;>Fruits like oranges, pineapples, mangoes, or bananas&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="805"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_milk`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_milk&quot;>Milk&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="806"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_1_star`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_1_star&quot;>1 Star&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="807"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_staples_grains`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_staples_grains&quot;>Staples: grains such as maize, wheat rice, millet, sorghum, and roots and tubers such as cassava and potatoes&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="808"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_legumes_beans_lentils_peas`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_legumes_beans_lentils_peas&quot;>Legumes: such as beans, lentils, peas, groundnuts, and seeds such as sesame&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="809"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_vitamin_1_fruits`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_vitamin_1_fruits&quot;>Vitamin A rich fruits: such as mango, papaya, passion fruit, oranges, banana, pineapple, avocado, watermelon, and tomatoes&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="810"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_vitamin_a_vegetables`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_vitamin_a_vegetables&quot;>Vitamin A rich vegetables: such as dark-green leaves, carrots, yellow sweet potato and pumpkin, eggplant, and cabbage&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="811"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_animal_source_foods`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_animal_source_foods&quot;>Animal-source foods: such as meat, chicken, fish, liver, eggs, and dairy products&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="812"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_oil_fats_magarine`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_oil_fats_magarine&quot;>Oils and fats such as margarine, butter, palm oil, shea butter and other vegetable oils improve the absorption of some vitamin and provide extra energy.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="813"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_encourage_good_personal_hygiene_practices`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_encourage_good_personal_hygiene_practices&quot;>Encourage good personal hygiene practices&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="814"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_advice_keep_breast_clean`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_advice_keep_breast_clean&quot;>Advise client to keep her body clean, especially hands, genital area and breasts to minimise infection Avoid douching, insertion of herbal products and use of tampons&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="815"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_use_cotton_underware_lose_fitting_clothing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_use_cotton_underware_lose_fitting_clothing&quot;>Use clean cotton underwear, and use loose fitting clothing&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="816"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_wipe_genetals_from_frnt_back`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_wipe_genetals_from_frnt_back&quot;>Wipe genitals from front to back (vulva to anus)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="817"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_6_10_hrs_sleep_nite`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_6_10_hrs_sleep_nite&quot;>Encourage client to take between 6-10 hours of sleep every night&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="818"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_advise_rest_1_hour_in_day`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_advise_rest_1_hour_in_day&quot;>Advise her to rest for one hour during the day&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="819"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_encourage_client_undertak_moderate_exercise`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_encourage_client_undertak_moderate_exercise&quot;>Encourage client to undertake moderate exercise regularly, especially if her daily activities do not entail much physical exercise&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="820"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise&quot;>Excercises&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="821"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pelvic_rock_help`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pelvic_rock_help&quot;>Pelvic Rock: helps relieves backache and pressure in the abdomen, and strengthens muscles in the abdomen&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="822"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pelvic_1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pelvic_1&quot;>Get down on your hand and knees&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="823"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_pelvic_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_pelvic_2&quot;>Pull in your abdomen and lift your buttocks.  Hold for a count of 5&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="824"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_gently_relax_ur_abdomen`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_gently_relax_ur_abdomen&quot;>Gently relax your abdomen and buttocks, allowing the curve of your back to return&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="825"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_repeat_5_6_times`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_repeat_5_6_times&quot;>Repeat 5-6 times.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="826"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_head_shoulder_lift`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_head_shoulder_lift&quot;>Head and Shoulder Lift: strengthens muscles in the abdomen&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="827"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_head_legs_1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_head_legs_1&quot;>Lie on you back with your knees bent, feet flat on the floor, and your arms at sides&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="828"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_head_legs_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_head_legs_2&quot;>Raise your head and shoulders and tighten your abdominal muscles.  Hold for count of 5.  Do not hold your breathe&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="829"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_head_leg_3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_head_leg_3&quot;>Lie back and relax&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="830"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_head_legs_4`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_head_legs_4&quot;>Repeat 5-10 times.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="831"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_squat_exercise`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_squat_exercise&quot;>Squat: strengthens leg muscles&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="832"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_squat_1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_squat_1&quot;>Stand while on to something to help you keep your balance.  Keep feet apart.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="833"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_Squat_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_Squat_2&quot;>Slowly bend your knees, keeping your back straight, and keeping your knees and feet apart.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="834"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_squat_3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_squat_3&quot;>Rise slowly, keeping hold of the object for balance.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="835"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_squat_4`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_squat_4&quot;>Repeat 3-5 times.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="836"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_rib_1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_rib_1&quot;>Sit with your legs crossed&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="837"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_rib_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_rib_2&quot;>Curve your arm over your it, and then return to the original position&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="838"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_rib_3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_rib_3&quot;>Repeat 4-5 times&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="839"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_rib_cage`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_rib_cage&quot;>Rib cage lift: strengthening leg muscles and making it easier to breathe&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="840"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_kegel_1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_kegel_1&quot;>Tighten the muscles around your anal opening and in your vagina (as if you holding back urine).  Hold for a count of 3, then relax.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="841"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_kegel_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_kegel_2&quot;>Repeat 5-10 times.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="842"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_exercise_kegel_3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_exercise_kegel_3&quot;>This exercise can be done anytime during the day when you are sitting down.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="843"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_kegel`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_kegel&quot;>Kegel Exercise:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="844"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_kegel_benefit`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_kegel_benefit&quot;>strengthens muscles that help make delivery easier, and reduces the chance of complications during delivery.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="845"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_educate_safe_food_preparation`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_educate_safe_food_preparation&quot;>Educate client on safe preparation of food:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="846"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_good_hygiene_cleanliness`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_good_hygiene_cleanliness&quot;>Good hygiene (cleanliness) is important to avoid diarrhea and other illness&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="847"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_use_clean_utensils_store_clean_place`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_use_clean_utensils_store_clean_place&quot;>Use clean utensils and store foods in a clean place&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="848"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_wash_vegatables_cook_immediately`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_wash_vegatables_cook_immediately&quot;>Wash vegetables, cook immediately to preserve nutrients&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="849"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_wash_raw_fruits_vegetables_b4_eating`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_wash_raw_fruits_vegetables_b4_eating&quot;>Wash raw fruits and vegetables before eating&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="850"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_wash_hands_with_soap_b4_preparing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_wash_hands_with_soap_b4_preparing&quot;>Wash your hands with soap and water before preparing foods and after using the toilet&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="851"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_sti_prevention`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_sti_prevention&quot;>STI Prevention&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="852"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_sti_explanation`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_sti_explanation&quot;>Explain effects of sexually transmitted infections (STIs) and HIV/AIDS, specifically on:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="853"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_factors_affecting_mother_child_hiv`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_factors_affecting_mother_child_hiv&quot;>Factors affecting mother-to-child transmission of HIV&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="854"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_sti_prevention_with_hiv`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_sti_prevention_with_hiv&quot;>How to prevent of STIs, including HIV&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="855"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_supplementation_during_preg`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_supplementation_during_preg&quot;>Supplementation during Pregnancy&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="856"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_supplement_explanation`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_supplement_explanation&quot;>Educate clients on what supplements to take&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="857"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_take_iron_folic_supplements`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_take_iron_folic_supplements&quot;>Take iron and folic acid supplements during pregnancy and for at least 3 months after&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="858"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_take_dewormer_to_treat_worms`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_take_dewormer_to_treat_worms&quot;>Take de-worming tablets to treat worms and help prevent anoemia&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="859"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tt_immunisation_schedule`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tt_immunisation_schedule&quot;>TT Immunisation Schedule&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="860"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_not_previously_immunized`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_not_previously_immunized&quot;>For women who were NOT previously immunized&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="861"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tt1_visit`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tt1_visit&quot;>TT1:  First ANC visit&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="862"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tt2_visit`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tt2_visit&quot;>TT2:  At least 4 weeks after TT1&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="863"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tt3_visit`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tt3_visit&quot;>TT3:  Six months after TT2&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="864"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tt4_visit`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tt4_visit&quot;>TT4:  One year after TT3&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="865"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tt5_visit`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tt5_visit&quot;>TT5:  At least one year after TT4&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="866"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_previously_immunized`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_previously_immunized&quot;>For women who were previously immunized&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="867"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_immunised_during_infacy`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_immunised_during_infacy&quot;>Immunised during infancy: 2 doses as above&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="868"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_immunised_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_immunised_2&quot;>Immunised during childhood: 1 dose of TT/Td&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="869"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_immunised_3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_immunised_3&quot;>Immunised during school age: 1 dose of TT/Td&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="870"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_immunised_4`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_immunised_4&quot;>Immunised during adolescence: None&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="871"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_educate_client_to_visit_health_centre`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_educate_client_to_visit_health_centre&quot;>Educate client to go to the health center when she has the following signs of labour:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="872"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_water_breaks`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_water_breaks&quot;>Water breaks&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="873"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_constant_abdominal_pain`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_constant_abdominal_pain&quot;>Constant abdominal pain&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="874"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_back_pain`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_back_pain&quot;>Back pain&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="875"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_waist_pain`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_waist_pain&quot;>Waist pain&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="876"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_mucoid_bloody_discharge`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_mucoid_bloody_discharge&quot;>Mucoid bloody discharge on pad&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="877"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_make_effor_deliver_facility`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_make_effor_deliver_facility&quot;>Counsel client to make every effort to deliver in a facility but in case the unexpected happens, then counsel client on what she needs to prepare for a home delivery&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="878"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_identify_midwife_nurse_birth_attendant`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_identify_midwife_nurse_birth_attendant&quot;>Identify a midwife, nurse or a birth attendant in the neighborhood, and another family member or friend to care for the baby immediately after birth&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="879"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_emphasize_importance_going_to_nearest_facility`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_emphasize_importance_going_to_nearest_facility&quot;>Emphasize importance of going to the nearest facility immediately after delivery with newborn baby for appropriate care&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="880"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_what_expect_during_labour`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_what_expect_during_labour&quot;>What to Expect during Labour&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="881"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_inform_client_health_center_hosp_chps`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_inform_client_health_center_hosp_chps&quot;>Inform client when to return to a health center, hospital, or CHPS facility: Advise her that a midwife will check for a number of issues as part of focused ANC visits.  The client should ideally consult a midwife during the following times during pregnancy: &lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="882"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_when_return_anc`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_when_return_anc&quot;>When to Return for ANC:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="883"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_anc_when1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_anc_when1&quot;>1st Focused ANC visit between 8-16 weeks of gestation, ideally between 8-12 weeks of gestation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="884"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_anc_when2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_anc_when2&quot;>And focused ANC visit between 24-26 weeks of gestation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="885"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_anc_when_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_anc_when_2&quot;>2nd focused ANC visit between 24-26 weeks of gestation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="886"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_anc_when3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_anc_when3&quot;>3rd focused ANC visit at 32 weeks of gestation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="887"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_anc_when_4`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_anc_when_4&quot;>4th focused ANC visit at 36 weeks of gestation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="888"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_visit_hosp_when`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_visit_hosp_when&quot;>In addition client should be counseled to return to a health facility if she has:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="889"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_as_soon_as_danger_signs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_as_soon_as_danger_signs&quot;>As soon as she has any danger signs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="890"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_question_concent_abt_preg_baby`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_question_concent_abt_preg_baby&quot;>Questions or concerns about her pregnancy or the baby&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="891"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_intermittent_preventive_treatment_with_sulf`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_intermittent_preventive_treatment_with_sulf&quot;>Intermittent Preventive Treatment (IPTp) with Sulfadoxine-Pyrimethamine (SP) for Pregnant Women&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="892"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_target_groups_for_iptp`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_target_groups_for_iptp&quot;>Target groups for IPTp using SP include:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="893"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_all_preg_women_no_malaria_16_36`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_all_preg_women_no_malaria_16_36&quot;>All pregnant women with no signs clinical malaria whose pregnancies are between 16-36 weeks of gestation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="894"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_with_first_second_preg`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_with_first_second_preg&quot;>Women with first or second pregnancies&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="895"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_adolescent_preg_10_24`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_adolescent_preg_10_24&quot;>Adolescent and young pregnant women (10-24 years)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="896"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_preg_women_with_sickle_cell`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_preg_women_with_sickle_cell&quot;>Pregnant women with sickle cell disease&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="897"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_preg_women_ff_conditions_exempted_from_sp`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_preg_women_ff_conditions_exempted_from_sp&quot;>Pregnant women with the following conditions should be exempted from using SP&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="898"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_1st_trimester_preg`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_1st_trimester_preg&quot;>Women in their 1st trimester of pregnancy (first 3 months)&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="899"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_known_to_have_glucose_6_phosphate`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_known_to_have_glucose_6_phosphate&quot;>Women known to have Glucose-6-Phosphate Dehydrogenase (G6PD) enzyme deficiency, either full or partial defect&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="900"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_known_severe_liver_disease`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_known_severe_liver_disease&quot;>Women known to have severe liver disease&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="901"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_with_unexplained_recurrent_jaundice`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_with_unexplained_recurrent_jaundice&quot;>Women with unexplained recurrent jaundice&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="902"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_allergic_sulphur`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_allergic_sulphur&quot;>Women who are known to be allergic to sulphur-containing drugs or pyrimethamine component&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="903"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_received_treatment_sulphur_drugs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_received_treatment_sulphur_drugs&quot;>Women who have received treatment with sulphur-based drugs, e.g. cotrimoxazole within 4 weeks of being seen at the clinic&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="904"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_hiv_aids_cotrimoxazole`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_hiv_aids_cotrimoxazole&quot;>Women with HIV/AIDS who have been put on cotrimoxazole for opportunistic infections&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="905"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_preg_beyond_36`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_preg_beyond_36&quot;>Women with pregnancy beyond 36 weeks (8 months) gestation&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="906"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_breastfeeding`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_breastfeeding&quot;>Women breastfeeding&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="907"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dosage_sp_iptp`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dosage_sp_iptp&quot;>Dosage of SP for IPTp:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="908"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_doseage_sp_iptp_explained`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_doseage_sp_iptp_explained&quot;>New GHS guidelines indicate that pregnant women should take up to 5 doses of SP for antimalarial prophylaxis.  A single dose compromising 3 tablets of 500 mg sulfadoxine + 25 mg pyrimethamine should be taken with clean water.  Ensure pregnant clients eat BEFORE taking the medicine, as some women can experience weakness when taken on an empty stomach.  The following is the dosage schedule for SP:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="909"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dosage_sp_itip_1`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dosage_sp_itip_1&quot;>1st dose at >16 weeks gestation.  The 1st dose should be administered by a midwife, therefore, refer clients to the health facility&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="910"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dosage_sp_itip_2`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dosage_sp_itip_2&quot;>2nd dose at least one month after 1st dose&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="911"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dosage_sp_itip_3`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dosage_sp_itip_3&quot;>3rd dose at least one month after 2nd dose&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="912"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dosage_st_iptp_4`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dosage_st_iptp_4&quot;>4th dose at least one month after 3rd dose&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="913"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dosage_st_iptp_5`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dosage_st_iptp_5&quot;>5th dose at least one month after 4th dose&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="914"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_dosage_note_sp_iptp`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_dosage_note_sp_iptp&quot;>Note:  The last dose of SP can be administered up to the time of delivery without any safety concerns.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="915"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_educate_use_sp`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_educate_use_sp&quot;>Counselling/Education on Use of SP &quot;&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="916"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_all_preg_women_edu_iptp_sp`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_all_preg_women_edu_iptp_sp&quot;>All pregnant women should be educated and counselled on IPTp using SP on an individual basis prior to drug administration&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="917"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_receive_sp_potential`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_receive_sp_potential&quot;>Women who receive SP should be educated on the potential adverse effects and what to do when these arise&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="918"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_refuse_iptp_sp`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_refuse_iptp_sp&quot;>Women who refuse IPTp using SP for any reason should NOT be discriminated against, and should be counseled to use ITN&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="919"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_treatement_uncomplicated_malaria_preg_women`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_treatement_uncomplicated_malaria_preg_women&quot;>Treatment for Uncomplicated Malaria in Pregnant Women&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="920"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_signs_symptoms`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_signs_symptoms&quot;>Signs and Symptoms&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="921"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_women_preg_1st_trim`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_women_preg_1st_trim&quot;>Women in their pregnancy and in their 1st trimester are at greater risk of developing clinical malaria.  The following signs and symptoms may occur:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="922"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_lassitube`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_lassitube&quot;>Lassitude&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="923"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fatigue`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fatigue&quot;>Fatigue&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="924"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_abdominal_discomfort`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_abdominal_discomfort&quot;>Abdominal discomfort&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="925"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_muscle_joint_aches`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_muscle_joint_aches&quot;>Muscle and joint aches&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="926"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_maybe_fever_chills_prespiration_anorexia`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_maybe_fever_chills_prespiration_anorexia&quot;>These maybe followed by fever, chills, perspiration, anorexia, vomiting and worsening malaise.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="927"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_preg_malaria_womb_contraction`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_preg_malaria_womb_contraction&quot;>During pregnancy malaria may also be associated with womb contraction or even start of labour and increased or reduced fetal movements.  Most of these signs and symptoms are non-specific and may occur with other infectious condition such as viral infections.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="928"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_note_pregnant_women_symptoms`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_note_pregnant_women_symptoms&quot;>Note: Pregnant women can also present with symptoms (such as dizziness, poor appetite, etc), which are not typical symptoms of malaria but may be the only indication they have clinical malaria&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="929"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_1st_trimester`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_1st_trimester&quot;>1st trimester&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="930"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_oral_quinine_600mg_8hr_7days`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_oral_quinine_600mg_8hr_7days&quot;> Oral Quinine 600 mg 8 hourly for 7 days&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="931"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_or_quinine_10mg_kg_body`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_or_quinine_10mg_kg_body&quot;>OR oral Quinine 10 mg/Kg body weight three times daily (up to a maximum of 600 mg daily) for three days + 300 mg of Clindamycin three times daily for 3 days&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="932"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_2nd_3rd_trimester`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_2nd_3rd_trimester&quot;>2nd or 3rd trimester&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="933"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_or_artesuna_amodiaquine_high_enery_drink`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_or_artesuna_amodiaquine_high_enery_drink&quot;>OR Artesunate + Amodiaquine.  These drugs may be taken with high energy drinks, like glucose.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="934"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_co_listered_formulation`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_co_listered_formulation&quot;>Co-Blistered Formulation:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="935"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_tablet_each_come_packed_together`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_tablet_each_come_packed_together&quot;>Tablets of each drug come packaged together.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="936"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_artesunate_amodiaquine_admin_together`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_artesunate_amodiaquine_admin_together&quot;>Artesunate and Amodiaquine should be administered together.  They may be administered either as a single dose each day OR as divided doses. If given as divided doses, half of the dose should be given in the morning, and half in the evening&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="937"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_single_daily_dosing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_single_daily_dosing&quot;>If given as SINGLE DAILY DOSING:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="938"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_twice_daily_dosing`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_twice_daily_dosing&quot;>If given as TWICE DAILY DOSING:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="939"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_fixed_dose_combination_therapy`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_fixed_dose_combination_therapy&quot;>With Fixed-Dose Combination Therapy: 2 tablets once a day for 3 days for adolescents and adults&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="940"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_or_artemether_lumefantrine`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_or_artemether_lumefantrine&quot;>OR Artemether + Lumefantrine tablets with the following doses:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="941"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_reserve_client_artesunate_amodiaquine`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_reserve_client_artesunate_amodiaquine&quot;>This is reserved for clients who do not tolerate Artesunate-Amodiaquine&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="942"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_drug_taken_twice_per_day_after_eating`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_drug_taken_twice_per_day_after_eating&quot;>The drug should be taken twice per day in divided doses, and after eating meals&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="943"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_standard_3_day_treatement_with_6_doses`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_standard_3_day_treatement_with_6_doses&quot;>Standard 3-day treatment with a total of six doses according to body weight is recommended as below:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="944"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_administartion_management_vomiting_other_support_treate`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_administartion_management_vomiting_other_support_treate&quot;>Administration, Management of Vomiting, and Other Supportive Treatment for Treatment with ACTs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="945"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_preferable_client_1st_dose_with_nurse`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_preferable_client_1st_dose_with_nurse&quot;>Preferable that client takes the first dose of the drug in front of the nurse or health worker&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="946"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_preferable_administer_medicine_fater_meal`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_preferable_administer_medicine_fater_meal&quot;>Preferable to administer medicine after the client has eaten a meal&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="947"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_if_vomit_after_30_min_retake_dosage`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_if_vomit_after_30_min_retake_dosage&quot;>If vomiting occurs within 30 minutes, the dosage of medicine should be repeated.  If vomiting stops, give client the 2nd and 3rd doses to take at home if you are sure that your instructions will be followed&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="948"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_ask_client_health_center`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_ask_client_health_center&quot;>Ask client to go to the health center or hospital if vomiting persists&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="949"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_treatment_fever_paracetamol`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_treatment_fever_paracetamol&quot;>Treatment of fever with Paracetamol is a recommended part of supportive care for malaria.  Paracetamol in tablet form may be given every 4-6 hours until the temperature is normal.&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="950"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_additional_advise_client`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_additional_advise_client&quot;>In addition to the above clients should be advised to:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="951"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_take_iron_supplements`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_take_iron_supplements&quot;>Take iron supplements&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="952"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_eat_well`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_eat_well&quot;>Eat Well&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="953"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_use_itn_other_preventive_measures`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_use_itn_other_preventive_measures&quot;>Use ITNs and other preventive measures&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="954"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_take_analgesics_prescribed`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_take_analgesics_prescribed&quot;>Takes analgesics as prescribed, e.g. paracetamol 1 g (2 tablets) every 6 hours, if needed&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="955"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_follow_up_treatement_uncomplicated_malaria`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_follow_up_treatement_uncomplicated_malaria&quot;>Counseling and Follow-up after Treatment of Uncomplicated Malaria&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="956"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_counsel_to_comply_treatement_avoid_resistance_to_drugs`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_counsel_to_comply_treatement_avoid_resistance_to_drugs&quot;>Counsel client to comply with treatment to avoid development of resistance of antimalarial drugs&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="957"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_educate_importance_full_dose`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_educate_importance_full_dose&quot;> Educate her on the importance of taking full dose of drugs in order to clear the parasites from the blood, and thus prevent progression of disease to complications like anemia&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="958"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_educate_client_on`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_educate_client_on&quot;>Also educate client on:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="959"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_danger_signs_return_follow_up`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_danger_signs_return_follow_up&quot;>Danger signs and to return for follow-up after treatment is completed or if her conditions worsens&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="960"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_report_adverse_reaction_to_drug_immediately`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_report_adverse_reaction_to_drug_immediately&quot;>Report any adverse reactions to the drugs immediately&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="961"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_itpt_sp_must_be_followed_as_previously_started`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_itpt_sp_must_be_followed_as_previously_started&quot;>Intermittent prevention treatment (IPTp) schedule with sulfa-doxine pyramethamine (SP) should be followed if it has previously been started, or should be started at next visit if not started previously&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="962"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`str_teaching_mother_how_keep_baby_warm`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;str_teaching_mother_how_keep_baby_warm&quot;>Teach mother how to keep the baby warm on the way to the health facility&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="963"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`crash_toast_text`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;crash_toast_text&quot;>Ooooops ! CHN on the go has crashed but a report has been sent to the developer to fix this problem&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="964"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`crash_dialog_title`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;crash_dialog_title&quot;>CHN on the go has crashed&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="966"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`crash_dialog_text`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;crash_dialog_text&quot;>An unexpected error occurred forcing the"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="967"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`crash_dialog_comment_prompt`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;crash_dialog_comment_prompt&quot;>You might add your comments about the problem below:&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="970"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`crash_dialog_ok_toast`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;crash_dialog_ok_toast&quot;>Thank you !&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="971"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`title_activity_user_registration`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;title_activity_user_registration&quot;>User Registration&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="972"
            column="13"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;`hello_blank_fragment`&quot; is not translated in &quot;es&quot; (Spanish)"
        category="Correctness:Messages"
        priority="8"
        summary="Incomplete translation"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;hello_blank_fragment&quot;>Hello blank fragment&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/Users/aangjnr/Desktop/AppsDev/grameen/cbcc-mobile-android-master/app/src/main/res/values/strings.xml"
            line="975"
            column="13"/>
    </issue>

</issues>
